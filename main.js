/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => InterceptorPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  SyncAPI: "https://api.obsidian.md"
};
var InterceptorPlugin = class extends import_obsidian.Plugin {
  constructor(app, manifest) {
    super(app, manifest);
    const syncInstance = this.getInternalPluginInstance("sync");
    this.origGetHost = syncInstance.getHost.bind(syncInstance);
  }
  getInternalPluginInstance(id) {
    return this.app.internalPlugins.getPluginById(id).instance;
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new SettingsTab(this.app, this));
    try {
      window.electronWindow.webContents.session.webRequest.onBeforeRequest(
        { urls: ["https://api.obsidian.md/*"] },
        async ({ url }, callback) => {
          await this.loadSettings();
          if (url.startsWith("https://api.obsidian.md")) {
            url = url.replace(
              "https://api.obsidian.md",
              this.settings.SyncAPI || DEFAULT_SETTINGS.SyncAPI
            );
          } else if (url.startsWith("https://publish.obsidian.md")) {
            url = url.replace(
              "https://publish.obsidian.md",
              this.settings.SyncAPI || "https://publish.obsidian.md"
            );
          }
          callback({ redirectURL: url });
        }
      );
    } catch (e) {
      new import_obsidian.Notice("Failed to intercept requests. The error was: " + e);
    }
    this.getInternalPluginInstance("sync").getHost = () => {
      let url = this.origGetHost();
      const syncAPI = this.settings.SyncAPI;
      if (syncAPI) {
        const scheme = syncAPI.startsWith("http:") ? "ws" : "wss";
        const syncAPIWithoutScheme = syncAPI.replace(
          /^https?:\/\//,
          ""
        );
        url = `${scheme}://${syncAPIWithoutScheme}/ws.obsidian.md`;
      }
      console.log("Websocket URL:", url);
      return url;
    };
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Obsidian Sync URL").addText((text) => {
      text.setPlaceholder(DEFAULT_SETTINGS.SyncAPI).setValue(this.plugin.settings.SyncAPI).onChange(async (value) => {
        if (this.plugin.settings) {
          this.plugin.settings.SyncAPI = value;
          await this.plugin.saveSettings();
        }
      });
    });
  }
};
